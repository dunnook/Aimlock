if getgenv().Aimlock_Loaded == true then
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Aimlock already loaded!",
		Text = "Aimlock already loaded!",
		Duration = 5
	})
	return
end
getgenv().Aimlock_Loaded = true
local enabled = false
local uis = game:GetService("UserInputService")
local plr = game:GetService("Players")
local lp = plr.LocalPlayer
local mouse = lp:GetMouse()
local enums = Enum.UserInputType:GetEnumItems()
for i, v in next, Enum.KeyCode:GetEnumItems() do
	table.insert(enums, v)
end
for i, v in next, enums do
	local split = string.split(tostring(v), ".")
	local enumName = split[#split]
	enums[enumName:lower()] = {
		split[2],
		enumName
	}
end
function getChar(plr)
    return plr.Character or plr.CharacterAdded:Wait()
end
function getClosestMouse()
    local range, player, part = math.huge
    for i, v in next, plr:GetPlayers() do
        if v ~= lp and getChar(v):FindFirstChildOfClass("Humanoid") and getChar(v):FindFirstChild("Head") then
            local partpos, isSuccess = workspace.CurrentCamera:WorldToViewportPoint(getChar(v).Head.Position)
			local distToMouse = (Vector2.new(partpos.X, partpos.Y) - Vector2.new(mouse.x, mouse.y)).Magnitude
			if settings.Aim_WallCheck == true then
				local rayOrigin = workspace.CurrentCamera.CFrame.Position
				local rayDirection = getChar(v).PrimaryPart.Position - rayOrigin
				local params = RaycastParams.new()
				params.FilterDescendantsInstances = {getChar(lp), getChar(v)}
				params.FilterType = Enum.RaycastFilterType.Blacklist
				local raycastResult = workspace:Raycast(rayOrigin, rayDirection, params)
				if raycastResult == nil and isSuccess == true and distToMouse < range and distToMouse < settings.Circle_Radius then
					range = (Vector2.new(partpos.x, partpos.y) - Vector2.new(mouse.x, mouse.y)).Magnitude
					player = v
				end
			else
				if isSuccess == true and distToMouse < range and distToMouse < settings.Circle_Radius then
					range = (Vector2.new(partpos.x, partpos.y) - Vector2.new(mouse.x, mouse.y)).Magnitude
					player = v
				end
			end
        end
    end
    return player, range
end
local circle = Drawing.new("Circle")
circle.Radius = 200
circle.Transparency = 1
circle.Thickness = 1
circle.Visible = true
circle.Filled = false
local i = 0
task.spawn(function()
	game:GetService("RunService").RenderStepped:Connect(function()
		if i >= 1 then 
			i = 0 
		end
		i += 0.0001 * settings.Circle_Color_Speed
		circle.Visible = settings.Circle_Visible
		circle.Radius = settings.Circle_Radius
		circle.Position = Vector2.new(mouse.X * settings.Windows_Scale / 100, mouse.Y * settings.Windows_Scale / 100 + (36 * settings.Windows_Scale/100))
		task.wait()
		circle.Color = Color3.fromHSV(i, 1, 1)
	end)
end)
uis.InputBegan:Connect(function(key)
	local Aim_Key;
	if enums[settings.Aim_Key] then
		Aim_Key = Enum[enums[settings.Aim_Key][1]][enums[settings.Aim_Key][2]]
	else
		Aim_Key = Enum.UserInputType.MouseButton2
	end
    if key.UserInputType == Aim_Key or key.KeyCode == Aim_Key then
		enabled = not enabled
		local target, _ = getClosestMouse()
		task.spawn(function()
			while true do
				if enabled == false then return end
				if settings.Aim_Lock == false then
					target, _ = getClosestMouse()
				end
				local vPrediction = Vector3.new(0, 0, 0);
				if target ~= nil and settings.Aim_Predict == true then
					--Velocity prediction
					local plrVelocity = getChar(target):FindFirstChild(settings.Aim_Part).Velocity
					--Range prediction
					if settings.Predict_Range_Value > 0 and getChar(target):FindFirstChildOfClass("Humanoid").MoveDirection.Magnitude > 0 then
						local range = (getChar(lp).PrimaryPart.Position - getChar(target).PrimaryPart.Position).Magnitude * settings.Predict_Range_Value
						plrVelocity = plrVelocity * range
					end
					--Ping prediction
					if settings.Predict_Ping_Value > 0 then
						plrVelocity = plrVelocity * lp:GetNetworkPing() * settings.Predict_Ping_Value
					end
					vPrediction = vPrediction + plrVelocity
				end
				print(vPrediction)
				task.wait()
				if target ~= nil and getChar(target):FindFirstChild(settings.Aim_Part) then
					workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, getChar(target):FindFirstChild(settings.Aim_Part).CFrame.Position + vPrediction)
				end
			end
		end)
    end
end)
uis.InputEnded:Connect(function(key)
	local Aim_Key;
	if enums[settings.Aim_Key] then
		Aim_Key = Enum[enums[settings.Aim_Key][1]][enums[settings.Aim_Key][2]]
	else
		Aim_Key = Enum.UserInputType.MouseButton2
	end
    if key.UserInputType == Aim_Key or key.KeyCode == Aim_Key then
		if settings.Aim_Hold == true then
        	enabled = false
		end
    end
end)
game:GetService("StarterGui"):SetCore("SendNotification", {
	Title = "Aimlock Loaded!"
	Text = "Right click to lock aim"
	Duration = 5
})
